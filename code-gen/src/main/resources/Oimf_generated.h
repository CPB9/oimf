// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_OIMF_OIMF_H_
#define FLATBUFFERS_GENERATED_OIMF_OIMF_H_

#include "flatbuffers/flatbuffers.h"


namespace oimf {

struct TraitApplication;
struct Field;
struct Method;
struct MethodArgument;
struct Trait;
struct TraitList;

struct TraitApplication : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::Vector<flatbuffers::Offset<TraitApplication>> *arguments() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<TraitApplication>> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* arguments */) &&
           verifier.Verify(arguments()) &&
           verifier.VerifyVectorOfTables(arguments()) &&
           verifier.EndTable();
  }
};

struct TraitApplicationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_arguments(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TraitApplication>>> arguments) { fbb_.AddOffset(6, arguments); }
  TraitApplicationBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TraitApplicationBuilder &operator=(const TraitApplicationBuilder &);
  flatbuffers::Offset<TraitApplication> Finish() {
    auto o = flatbuffers::Offset<TraitApplication>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<TraitApplication> CreateTraitApplication(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TraitApplication>>> arguments = 0) {
  TraitApplicationBuilder builder_(_fbb);
  builder_.add_arguments(arguments);
  builder_.add_name(name);
  return builder_.Finish();
}

struct Field : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  const TraitApplication *type() const { return GetPointer<const TraitApplication *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* type */) &&
           verifier.VerifyTable(type()) &&
           verifier.EndTable();
  }
};

struct FieldBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_type(flatbuffers::Offset<TraitApplication> type) { fbb_.AddOffset(6, type); }
  FieldBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FieldBuilder &operator=(const FieldBuilder &);
  flatbuffers::Offset<Field> Finish() {
    auto o = flatbuffers::Offset<Field>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Field> CreateField(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<TraitApplication> type = 0) {
  FieldBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_name(name);
  return builder_.Finish();
}

struct Method : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::Vector<flatbuffers::Offset<MethodArgument>> *arguments() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MethodArgument>> *>(6); }
  const TraitApplication *returnType() const { return GetPointer<const TraitApplication *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* arguments */) &&
           verifier.Verify(arguments()) &&
           verifier.VerifyVectorOfTables(arguments()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* returnType */) &&
           verifier.VerifyTable(returnType()) &&
           verifier.EndTable();
  }
};

struct MethodBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_arguments(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MethodArgument>>> arguments) { fbb_.AddOffset(6, arguments); }
  void add_returnType(flatbuffers::Offset<TraitApplication> returnType) { fbb_.AddOffset(8, returnType); }
  MethodBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MethodBuilder &operator=(const MethodBuilder &);
  flatbuffers::Offset<Method> Finish() {
    auto o = flatbuffers::Offset<Method>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Method> CreateMethod(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MethodArgument>>> arguments = 0,
   flatbuffers::Offset<TraitApplication> returnType = 0) {
  MethodBuilder builder_(_fbb);
  builder_.add_returnType(returnType);
  builder_.add_arguments(arguments);
  builder_.add_name(name);
  return builder_.Finish();
}

struct MethodArgument : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  const TraitApplication *type() const { return GetPointer<const TraitApplication *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* type */) &&
           verifier.VerifyTable(type()) &&
           verifier.EndTable();
  }
};

struct MethodArgumentBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_type(flatbuffers::Offset<TraitApplication> type) { fbb_.AddOffset(6, type); }
  MethodArgumentBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MethodArgumentBuilder &operator=(const MethodArgumentBuilder &);
  flatbuffers::Offset<MethodArgument> Finish() {
    auto o = flatbuffers::Offset<MethodArgument>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<MethodArgument> CreateMethodArgument(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<TraitApplication> type = 0) {
  MethodArgumentBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_name(name);
  return builder_.Finish();
}

struct Trait : private flatbuffers::Table {
  const flatbuffers::String *guid() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::Vector<flatbuffers::Offset<Method>> *methods() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Method>> *>(6); }
  const flatbuffers::Vector<flatbuffers::Offset<Field>> *fields() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Field>> *>(8); }
  const flatbuffers::Vector<flatbuffers::Offset<TraitApplication>> *extends() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<TraitApplication>> *>(10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* guid */) &&
           verifier.Verify(guid()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* methods */) &&
           verifier.Verify(methods()) &&
           verifier.VerifyVectorOfTables(methods()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* fields */) &&
           verifier.Verify(fields()) &&
           verifier.VerifyVectorOfTables(fields()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* extends */) &&
           verifier.Verify(extends()) &&
           verifier.VerifyVectorOfTables(extends()) &&
           verifier.EndTable();
  }
};

struct TraitBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_guid(flatbuffers::Offset<flatbuffers::String> guid) { fbb_.AddOffset(4, guid); }
  void add_methods(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Method>>> methods) { fbb_.AddOffset(6, methods); }
  void add_fields(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Field>>> fields) { fbb_.AddOffset(8, fields); }
  void add_extends(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TraitApplication>>> extends) { fbb_.AddOffset(10, extends); }
  TraitBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TraitBuilder &operator=(const TraitBuilder &);
  flatbuffers::Offset<Trait> Finish() {
    auto o = flatbuffers::Offset<Trait>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<Trait> CreateTrait(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> guid = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Method>>> methods = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Field>>> fields = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TraitApplication>>> extends = 0) {
  TraitBuilder builder_(_fbb);
  builder_.add_extends(extends);
  builder_.add_fields(fields);
  builder_.add_methods(methods);
  builder_.add_guid(guid);
  return builder_.Finish();
}

struct TraitList : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<Trait>> *traits() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Trait>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* traits */) &&
           verifier.Verify(traits()) &&
           verifier.VerifyVectorOfTables(traits()) &&
           verifier.EndTable();
  }
};

struct TraitListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_traits(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Trait>>> traits) { fbb_.AddOffset(4, traits); }
  TraitListBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TraitListBuilder &operator=(const TraitListBuilder &);
  flatbuffers::Offset<TraitList> Finish() {
    auto o = flatbuffers::Offset<TraitList>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<TraitList> CreateTraitList(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Trait>>> traits = 0) {
  TraitListBuilder builder_(_fbb);
  builder_.add_traits(traits);
  return builder_.Finish();
}

inline const TraitList *GetTraitList(const void *buf) { return flatbuffers::GetRoot<TraitList>(buf); }

inline bool VerifyTraitListBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<TraitList>(); }

inline void FinishTraitListBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<TraitList> root) { fbb.Finish(root); }

}  // namespace oimf

#endif  // FLATBUFFERS_GENERATED_OIMF_OIMF_H_
